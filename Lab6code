# -*- coding: utf-8 -*-
"""
Created on Tue Oct  8 20:32:38 2019

@author: Cade Knott
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as sig
plt.rcParams.update({'font.size': 14}) # set font size in plots
steps = 1e-3
t = np.arange(0,2+steps,steps) # to go up to 5.0, we must add a stepSize since `np.arange()`

def step(t, start):
    y = np.zeros((len(t)))
    for i in range(len(t)):
          if t[i] > start:
              y[i] = 1    
          else:
              y[i] = 0
    return y

def handsolv(t):
        y = (0.5 + np.exp(-6*t) - (0.5*np.exp(-4*t)))*step(t, 0)
        return y
        
y1 = handsolv(t)

num = [1, 6, 12]
den = [1, 10, 24]

tout, yout = sig.step((num, den), T = t) 

den2 = [1, 10, 24, 0]

r, p, _ = sig.residue(num, den2)

print('r' + str(r))

print('p' + str(p))

num3 = [25250]
den3 = [1, 18, 218, 2036, 9085, 25250, 0]


r2, p2, _ = sig.residue(num3, den3)

print('r2' + str(r2))

print('p2' + str(p2))

t2 = np.arange(0,4.5+steps,steps)

def cosmethod(r2, p2, t2):
    y = np.zeros((len(t2)))
    for i in range(len(r2)):
        a = np.real(p2[i])
        w = np.imag(p2[i])
        k0 = abs(r2[i])
        k1 = np.angle(r2[i])
        y = y + (k0*np.exp(a*t2)*np.cos(w*t2 + k1))*step(t2, 0)
    return y
    
y2 = cosmethod(r2, p2, t2)

den4 = [1, 18, 218, 2036, 9085, 25250]     

tout2, yout2 = sig.step((num3, den4), T = t)
    
myFigSize = (12,14)
plt.figure(figsize=myFigSize)
plt.plot(t,y1)
plt.grid(True)
plt.ylabel('y_1(t)')
plt.xlabel('t')
plt.title('Hand Solved Step Response')

myFigSize = (12,14)
plt.figure(figsize=myFigSize)
plt.plot(tout,yout)
plt.grid(True)
plt.ylabel('y_1(t)')
plt.xlabel('t')
plt.title('Scipy Step Response')

myFigSize = (12,14)
plt.figure(figsize=myFigSize)
plt.plot(t2, y2)
plt.axis([0,2,0,1.2])
plt.grid(True)
plt.ylabel('y_1(t)')
plt.xlabel('t')
plt.title('Cosine Method')

myFigSize = (12,14)
plt.figure(figsize=myFigSize)
plt.plot(tout2, yout2)
plt.grid(True)
plt.ylabel('y_1(t)')
plt.xlabel('t')
plt.title('Scipy Step Response')
