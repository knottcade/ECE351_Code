import numpy as np
import matplotlib.pyplot as plt
plt.rcParams.update({'font.size': 14}) # set font size in plots
steps = 100e-2
t = np.arange(-15,10+steps,steps) # to go up to 5.0, we must add a stepSize since `np.arange()`
 # goes up to (without including) the value of the second argument
print('# of elements: len(t) =',len(t), # notice this may be one larger than expected since `t` starts at 0
 '\nFirst element: t[0] =',t[0], # index the first value of the array `t`
 '\nLast element: t[len(t)-1] =',t[len(t)-1]) # index the last value of the array `t`
# Note that despite `t` having a l
# Create the output `y(t)` using a for loop and if/else statements
#def example1(t):
#    y = np.zeros((len(t),1)) # initialize `y` as a numpy array (of zeros)

#    for i in range(len(t)):
        
#if i < (len(t)+1) / 3:
#y[i] = t[i]**2
# else:
#        y[i] = np.cos(t[i])
#        y[i] = t[i]
#    return y

#y = example1(t) # function call using the user-defined function, shown in the above cell
# =============================================================================
# myFigSize = (10,8)
# plt.figure(figsize=myFigSize)
# plt.subplot(2,1,1)
# plt.plot(t,y)
# plt.grid(True)
# plt.ylabel('y(t) with Good Resolution')
# plt.title('Background - Illustration of for Loops and if/else Statements')
# =============================================================================
def func1(t, start):
    y = np.zeros((len(t),1))
    for i in range(len(t)):
        if t[i] > start:
            y[i] = np.cos(t[i])
        else:
            y[i] = 0
    return y
    
def ramp(t, m, start):
    y = np.zeros((len(t),1))
    for i in range(len(t)):
          if t[i] > start:
              y[i] = (m*t[i])-(m*start)
          else:
              y[i] = 0
    return y

def step(t, m, start):
    y = np.zeros((len(t),1))
    for i in range(len(t)):
          if t[i] > start:
              y[i] = (m)    
          else:
              y[i] = 0
    return y

def chimney(t):
    y = ramp(t, 1, 0) - ramp(t, 1, 3) + step(t, 5, 3) - step(t, 2, 6) - ramp(t, 2, 6)
    return y

y = chimney(-t)

#y = ramp(t, 1, 0)

#y = func1(t, -5)


dt = np.diff(t)
dy = np.diff(y, axis = 0)


myFigSize = (10,8)
plt.figure(figsize=myFigSize)
plt.subplot(2,1,1)
plt.plot(t,y)
#plt.plot(t[0:len(t)-1],dy/dt)
plt.axis([-15,10,-4,10])
plt.grid(True)
plt.ylabel('y(t) with Good Resolution')
plt.title('Time Reversal; y(-t)')
